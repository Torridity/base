/**
 * Copyright (C) 2014 Karlsruhe Institute of Technology (support@kitdatamanager.net)
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License.
 */
package edu.kit.dama.ui.components;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.Property.ValueChangeListener;
import com.vaadin.data.util.BeanItemContainer;
import com.vaadin.server.Page;
import com.vaadin.ui.AbstractSelect;
import com.vaadin.ui.AbstractSelect.Filtering;
import com.vaadin.ui.AbstractSelect.NewItemHandler;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Notification;
import com.vaadin.ui.VerticalLayout;

/**
 * ComboBox with a online filter, displaying only matching values. It's useful
 * if you have a lengthy list with objects.
 *
 * @author hartmann-v
 *
 * @param <T> class of the instances.
 */
public class FilteredComboBox<T> extends CustomComponent implements
        ValueChangeListener {

  /**
   * Version UID is the date in the format: yyyymmdd
   */
  private static final long serialVersionUID = 20120830L;
  @AutoGenerated
  private VerticalLayout mainLayout;
  @AutoGenerated
  private ComboBox comboBox;
  /**
   * Container holding all possible values.
   */
  private BeanItemContainer<T> beanItems = null;
  /**
   * Name of the value of the property which should be displayed in the
   * combobox.
   */
  private String property = null;
  /**
   * Shows notification if a (new) item is selected.
   */
  private boolean debugMode = false;

  /*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
  /**
   * The constructor should first build the main layout, set the composition
   * root and then do any custom initialization.
   *
   * The constructor will not be automatically regenerated by the visual editor.
   */
  public FilteredComboBox() {
    buildMainLayout();
    setCompositionRoot(mainLayout);

    // add user code here
  }

  /**
   * Initialize Combobox with a container, the property and a handler for new
   * items (if allowed)
   *
   * @param caption Caption of the widget.
   * @param bic Container holding all values.
   * @param property The property holding the data for display.
   * @param newItemHandler A handler for new items. If NULL new items are not
   * allowed.
   */
  public void initializeComboBox(String caption, BeanItemContainer<T> bic,
          String property, NewItemHandler newItemHandler) {
    initializeComboBox(caption, bic, property);
    addValueChangeListener(newItemHandler);
  }

  /**
   * Initialize Combobox with a container, the property and a handler for new
   * items (if allowed)
   *
   * @param caption Caption of the widget.
   * @param bic Container holding all values.
   * @param property The property holding the data for display.
   */
  public void initializeComboBox(String caption, BeanItemContainer<T> bic,
          String property) {

    beanItems = bic;
    this.property = property;

    comboBox.setContainerDataSource(beanItems);
    comboBox.setCaption(caption);

    // Sets the combobox to show a certain property as the item caption
    comboBox.setItemCaptionPropertyId(property);
    comboBox.setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_PROPERTY);

    // Sets the icon to use with the items
    // l.setItemIconPropertyId(iso3166_PROPERTY_FLAG);
    // Set a reasonable width
    // comboBox.setWidth(350, UNITS_PIXELS);
    // Set the appropriate filtering mode for this example
    comboBox.setFilteringMode(Filtering.FILTERINGMODE_CONTAINS);
    comboBox.setImmediate(true);

    // Disallow null selections
    comboBox.setNullSelectionAllowed(false);

    comboBox.addListener(this);
  }

  /**
   * Add a method to add new entries. This method should be called only once per
   * instance.
   *
   * @param newItemHandler Handle the new item.
   */
  public void addValueChangeListener(NewItemHandler newItemHandler) {
    comboBox.setNewItemsAllowed(true);
    comboBox.setNewItemHandler(newItemHandler);
  }

  /**
   * Add a ValueChangeListener.
   *
   * @param vcl Interface called if the value changed.
   */
  public void addListener(ValueChangeListener vcl) {
    comboBox.addListener(vcl);
  }

  /**
   * Remove an existing ValueChangeListener.
   *
   * @param vcl Interface which should be removed from the list of listeners.
   */
  public void removeListener(ValueChangeListener vcl) {
    comboBox.removeListener(vcl);
  }

  @AutoGenerated
  private VerticalLayout buildMainLayout() {
    // common part: create layout
    mainLayout = new VerticalLayout();
    mainLayout.setImmediate(false);
    mainLayout.setWidth("-1px");
    mainLayout.setHeight("-1px");
    mainLayout.setMargin(false);

    // top-level component properties
    setWidth("-1px");
    setHeight("-1px");

    // comboBox
    comboBox = new ComboBox();
    comboBox.setImmediate(true);
    comboBox.setWidth("100%");
    comboBox.setHeight("-1px");
    mainLayout.addComponent(comboBox);

    return mainLayout;
  }

  /*
   * Shows a notification when a selection is made.
   * 
   * @param event event holding selected item.
   */
  public void valueChange(ValueChangeEvent event) {
    Property selected = beanItems.getContainerProperty(event.getProperty()
            .getValue(), property);
    if (debugMode) {
      new Notification("Selection", "Selected item: " + selected, Notification.Type.TRAY_NOTIFICATION).show(Page.getCurrent());
    }
  }

  /**
   * Get selected value.
   *
   * @return last selected value.
   */
  public T getSelectedValue() {
    return (T) comboBox.getValue();
  }

  /**
   * Set selected value.
   *
   * @param selectedItem value to be set.
   */
  public void setSelectedValue(T selectedItem) {
    if (selectedItem != null) {
      if (beanItems != null) {
        if (beanItems.getItemIds().contains(selectedItem)) {
          beanItems.addBean(selectedItem);
        }
      } else {
        throw new NullPointerException("Please define BeanItemContainer first.");
      }
    }
    comboBox.setValue(selectedItem);

  }

  /**
   * Get debug mode.
   *
   * @see debugMode
   * @return debug mode
   */
  private boolean isDebugMode() {
    return debugMode;
  }

  /**
   * Set debug mode.
   *
   * @param debugMode Show debug messages or not.
   */
  private void setDebugMode(boolean debugMode) {
    this.debugMode = debugMode;
  }
}
